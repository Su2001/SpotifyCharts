name: CI & CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  ## CI ##
  continuous-integration-for-topcharts:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies and run tests in topCharts
        run: |
          cd topCharts
          echo "Current directory: $(pwd)"
          if [ -f requirements.txt ]; then
            echo "requirements.txt found, installing dependencies..."
            pip install --user -r requirements.txt
          else
            echo "requirements.txt not found!"
          fi
          pip3 install --upgrade pytest
          pytest
        shell: bash

  continuous-integration-for-songcomments:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies and run tests in songcomments
        run: |
          cd songComments
          echo "Current directory: $(pwd)"
          if [ -f requirements.txt ]; then
            echo "requirements.txt found, installing dependencies..."
            pip install --user -r requirements.txt
          else
            echo "requirements.txt not found!"
          fi
          pip3 install --upgrade pytest
          pytest
        shell: bash

  continuous-integration-for-playlist:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies and run tests in playlist
        run: |
          cd playlist
          echo "Current directory: $(pwd)"
          if [ -f requirements.txt ]; then
            echo "requirements.txt found, installing dependencies..."
            pip install --user -r requirements.txt
          else
            echo "requirements.txt not found!"
          fi
          pip3 install --upgrade pytest
          pytest
        shell: bash

  continuous-integration-for-search:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies and run tests in search
        run: |
          cd search
          echo "Current directory: $(pwd)"
          if [ -f requirements.txt ]; then
            echo "requirements.txt found, installing dependencies..."
            pip install --user -r requirements.txt
          else
            echo "requirements.txt not found!"
          fi
          pip3 install --upgrade pytest
          pytest
        shell: bash

  continuous-integration-for-songdetails:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies and run tests in songdetails
        run: |
          cd songDetails
          echo "Current directory: $(pwd)"
          if [ -f requirements.txt ]; then
            echo "requirements.txt found, installing dependencies..."
            pip install --user -r requirements.txt
          else
            echo "requirements.txt not found!"
          fi
          pip3 install --upgrade pytest
          pytest
        shell: bash

  ## CD ##
  build-test-deploy-for-topcharts:
    needs: continuous-integration-for-topcharts
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESSTOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: topCharts/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/topchartsservice:latest


  build-test-deploy-for-songcomments:
    needs: continuous-integration-for-songcomments
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESSTOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: songComments/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/songcomments:latest
  
  test-accept-for-playlist:
    needs: continuous-integration-for-playlist
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Compose
        run: sudo apt-get update && sudo apt-get install docker-compose -y

      - name: Build and run Docker Compose
        run: docker-compose up --build -d

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Install dependencies and run tests
        run: |
          cd accTest
          echo "Current directory: $(pwd)"
          if [ -f requirements.txt ]; then
            echo "requirements.txt found, installing dependencies..."
            pip install --user -r requirements.txt
          else
            echo "requirements.txt not found!"
          fi
          python test_playList.py
        shell: bash


  build-test-deploy-for-playlist:
    needs: test-accept-for-playlist
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESSTOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: playlist/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/playlist:latest

  build-test-deploy-for-search:
    needs: continuous-integration-for-search
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESSTOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: search/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/searchservice:latest

  build-test-deploy-for-songdetails:
    needs: continuous-integration-for-songdetails
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESSTOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: songDetails/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/songdetailsservice:latest
